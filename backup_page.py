import streamlit as st
import sqlite3
import pandas as pd
import shutil

def listar_usuarios():
    try:
        conn = sqlite3.connect("users.db")
        df = pd.read_sql_query("SELECT username, role FROM users", conn)
        conn.close()
        return df
    except Exception as e:
        return None

def render_backup_page():
    st.title("üì• Backup e Restaura√ß√£o do Banco de Usu√°rios")

    # ====== Download do Banco ======
    st.subheader("üì• Fazer Download do Banco Atual")
    try:
        with open("users.db", "rb") as file:
            st.download_button(
                label="üì• Fazer download do users.db",
                data=file,
                file_name="users_backup.db",
                mime="application/octet-stream"
            )
    except FileNotFoundError:
        st.error("Arquivo users.db n√£o encontrado.")

    st.markdown("---")

    # ====== Upload / Restaura√ß√£o ======
    st.subheader("üì§ Restaurar Banco de Usu√°rios")
    uploaded_file = st.file_uploader("Selecione um arquivo `.db` para upload e restaura√ß√£o", type=["db"])

    if uploaded_file:
        if st.button("‚úÖ Restaurar Banco de Usu√°rios"):
            try:
                with open("users.db", "wb") as f:
                    f.write(uploaded_file.read())
                st.success("Banco de usu√°rios restaurado com sucesso! Fa√ßa login novamente.")
                st.info("Dica: Reinicie o app ap√≥s restaurar.")
            except Exception as e:
                st.error(f"Erro ao restaurar banco: {e}")

    st.markdown("---")

    # ====== Lista de Usu√°rios ======
    st.subheader("üë• Usu√°rios Cadastrados Atualmente")

    usuarios_df = listar_usuarios()
    if usuarios_df is not None and not usuarios_df.empty:
        st.dataframe(usuarios_df)
    else:
        st.info("Nenhum usu√°rio encontrado no banco atual.")
